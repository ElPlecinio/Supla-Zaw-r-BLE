#define STATUS_LED_GPIO 9
#define STATUS_LED2_GPIO 8
#define RELAY_GPIO 7
#define BUTTON_CFG_RELAY_GPIO 10

#include <SuplaDevice.h>
#include <supla/network/esp_wifi.h>
#include <supla/control/virtual_relay.h>
#include <supla/control/button.h>
#include <supla/control/action_trigger.h>
#include <supla/device/status_led.h>
#include <supla/storage/littlefs_config.h>
#include <supla/network/esp_web_server.h>
#include <supla/network/html/device_info.h>
#include <supla/network/html/protocol_parameters.h>
#include <supla/network/html/status_led_parameters.h>
#include <supla/network/html/wifi_parameters.h>
#include <supla/device/supla_ca_cert.h>
#include <supla/events.h>
#include <supla/sensor/binary.h>
#include <supla/storage/eeprom.h>

Supla::Eeprom eeprom;
Supla::ESPWifi wifi;
Supla::LittleFsConfig configSupla;

Supla::Device::StatusLed statusLed(STATUS_LED_GPIO, false); // inverted state
Supla::EspWebServer suplaServer;
Supla::Control::VirtualRelay *r1 = nullptr;
Supla::Sensor::Binary *cz = nullptr; 
Supla::Control::Button *buttonCfgRelay = nullptr;

Supla::Html::DeviceInfo htmlDeviceInfo(&SuplaDevice);
Supla::Html::WifiParameters htmlWifi;
Supla::Html::ProtocolParameters htmlProto;
Supla::Html::StatusLedParameters htmlStatusLed;



void setup() {
  pinMode(STATUS_LED_GPIO, OUTPUT);  // Ustawienie pinu diody LED jako wyjście
  pinMode(STATUS_LED2_GPIO, OUTPUT); // Ustawienie drugiego pinu diody LED jako wyjście
  pinMode(RELAY_GPIO, OUTPUT);  // Ustawienie pinu przekaźnika jako wyjście
  pinMode(BUTTON_CFG_RELAY_GPIO, INPUT_PULLUP);  // Ustawienie pinu przycisku jako wejście z rezystorem pull-up
  
  Serial.begin(115200);

  r1 = new Supla::Control::VirtualRelay();
  buttonCfgRelay = new Supla::Control::Button(BUTTON_CFG_RELAY_GPIO, true, true);

  r1->getChannel()->setDefault(SUPLA_CHANNELFNC_VALVE_OPENCLOSE);
  r1->setDefaultStateRestore();
  cz->getChannel()->setDefault(SUPLA_CHANNELFNC_NOLIQUIDSENSOR);

  buttonCfgRelay->configureAsConfigButton(&SuplaDevice);
  buttonCfgRelay->addAction(Supla::TOGGLE, r1, Supla::ON_CLICK_1);

  // Ustawienie certyfikatów dla Supla
  SuplaDevice.setSuplaCACert(suplaCACert);
  SuplaDevice.setSupla3rdPartyCACert(supla3rdCACert);
  SuplaDevice.setName("Supla Zawór BLE");

  SuplaDevice.begin();
}

void loop() {
  SuplaDevice.iterate();


  // Utrzymuj zawór otwarty, jeśli przekaźnik jest włączony
  if (r1->isOn()) {
    digitalWrite(RELAY_GPIO, HIGH);  // Włącz przekaźnik (zasilanie)
    digitalWrite(STATUS_LED_GPIO, HIGH);  // Włącz przekaźnik (zasilanie)
    digitalWrite(STATUS_LED2_GPIO, LOW);  // Włącz przekaźnik (zasilanie)
  } else {
    digitalWrite(RELAY_GPIO, LOW);   // Wyłącz przekaźnik (brak zasilania)
    digitalWrite(STATUS_LED2_GPIO, HIGH);  // Włącz przekaźnik (zasilanie)
    digitalWrite(STATUS_LED_GPIO, LOW);  // Włącz przekaźnik (zasilanie)
  }
}
